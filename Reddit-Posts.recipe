#!/usr/bin/env python2
# vim:fileencoding=utf-8
from __future__ import unicode_literals, division, absolute_import, print_function
from calibre.web.feeds.news import BasicNewsRecipe

class AdvancedUserRecipe1542030622(BasicNewsRecipe):
    title          = 'Reddit Posts'
    auto_cleanup   = False
    __author__ = 'phoebus'
    language = 'en'
    description = "Tales from the internet"
    publisher = 'Reddit users'
    oldest_article =7  # days - change as required
    max_articles_per_feed = 8 # change as required
    no_stylesheets = True
    encoding = 'utf-8'
    remove_javascript = True
    use_embedded_content = False
    recursions = 11
    remove_attributes = ['size', 'style']


    feeds          = [
        (u'Anti Work', u'https://old.reddit.com/r/antiwork/.rss'),
        (u'Rugby', u'https://old.reddit.com/r/rugbyunion/.rss'),
        (u'Late Stage', u'https://old.reddit.com/r/latestagecapitalism/.rss'),
        (u'CFB', u'https://old.reddit.com/r/cfb/.rss'),
        (u'Light Phone', u'https://old.reddit.com/r/LightPhone/.rss'),
        (u'Denver', u'https://old.reddit.com/r/Denver/.rss'),
        (u'World News', u'https://old.reddit.com/r/worldnews/.rss'),
        (u'Korea', u'https://old.reddit.com/r/Korea/.rss'),
        (u'Ask', u'https://old.reddit.com/r/askreddit/.rss'),

    ] # see https://www.reddit.com/wiki/rss or https://www.reddit.com/r/pathogendavid/comments/tv8m9/pathogendavids_guide_to_rss_and_reddit/'
    
    
#    conversion_options = {
 #       'comment': description, 'tags': category, 'publisher': publisher, 'language': language
  #  }

    keep_only_tags = [  
                    dict(name='p', attrs={'class': [
                                                'title',
                                                            ]}),
                    #dict(name='span', attrs={'class': [
                     #                           'domain',
                      #                                      ]}),                    
                    dict(name='div', attrs={'class': [
                                                'expando',
                                                            ]}),  
                  #  dict(name='h1', attrs={'class': [
                   #                             'hover redditname',
                    #                                        ]}),
                 #   dict(name='meta', attrs={'property': [
                  #                              'og:title',                                 
                   #                                         ]}),
                  #  dict(name='meta', attrs={'title'}),
                    dict(name='div', attrs={'class': [

                                                'entry unvoted',
                                             #   'usertext-body may-blank-within md-container ',
                                              #  'usertext-body may-blank-within md-container',  
                                               # 'md',                                                                     
                                                            ]}),
                  #  dict(name='div', attrs={'data-test-id': [
                   #                             'post-content',                                   
                    #                                        ]}), 
                  #  dict(name='div', attrs={'class': [
					#							's10usnt7-0 gxtxxZ'
                    #                                        ]}), 
                      ]

    remove_tags = [

		        dict(name='button'),
		        dict(name='span', attrs={'class': [
        									'flair',
        									'flair ',
        													]}),
		        dict(name='div', attrs={'data-author': [
        									'AutoModerator',
        													]}),  
		        dict(name='ul', attrs={'class': [
        									'flat-list buttons',
        													]}),        													
		        dict(name='input', attrs={'type': [
        									'hidden',
        													]}),   
 		        dict(name='svg'),
    				]

    def is_link_wanted(self, url, a):
        return a['class'] == 'next' and a.findParent('nav', attrs={'class':'PaginationContent'}) is not None

   # def postprocess_html(self, soup, first_fetch):
    #    for div in soup.findAll(attrs={'data-author':'AutoModerator'}):
     #       div.extract()
      #  return soup
